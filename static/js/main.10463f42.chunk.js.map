{"version":3,"sources":["store/store.ts","error/developing.ts","components/FoldableList.tsx","components/OutlineView.tsx","components/LineNumberedTextArea.tsx","components/EditorMain.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["initialState","listed","editorContent","reducer","state","action","type","value","scenario","StoreContext","createContext","leaf","id","label","contents","kind","node","children","safeUnreachable","_x","Error","FoldableList","props","UnorderedList","className","FoldableListItem","useState","isOpen","setIsOpen","body","React","Children","map","element","cursor","ListItem","onClick","header","TreeToFoldableList","t","OutlineView","tree","useContext","undefined","LineNumberedTextArea","valueLineNumber","setValueLineNumber","textAreaHeight","setTextAreaHeight","countLineNumber","text","match","length","TextArea","labelText","style","height","toString","pointerEvents","wrap","onChange","e","ln","target","lns","Array","from","keys","n","join","scrollHeight","EditorMain","store","dispatch","EditorHeader","path","pathTo","opened","Breadcrumb","name","BreadcrumbItem","targetId","followingPath","find","result","concat","dummyScenario","fileName","App","useReducer","useEffect","Provider","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.10463f42.chunk.js","sourcesContent":["import React, { createContext } from 'react';\n\nexport type State = {\n    scenario?: Scenario,\n    listed: string[],\n    opened?: string,\n    editorContent: string,\n}\n  \nexport type Scenario = {\n    fileName: string,\n    tree: Tree\n}\n  \nexport type Tree = Node | Leaf\n  \nexport type Leaf = {\n    kind: 'leaf'\n    id: string,\n    label: string,\n    contents: string,\n}\n\nexport type Node = {\n    kind: 'node',\n    id: string,\n    label: string,\n    contents: string,\n    children: Tree[]\n}\n\nexport const initialState : State = {\n    listed: [], \n    editorContent: \"\",\n}\n\nexport type Action =\n    | { type: 'EDITOR_UPDATE', value: string }\n    | { type: 'LOAD_SCENARIO', value: Scenario }\n\nexport const reducer : (state: State, action: Action) => State = (state, action) => {\n    switch(action.type) {\n        case 'EDITOR_UPDATE':\n            return { ...state, editorContent: action.value };\n        case 'LOAD_SCENARIO':\n            return { ...state, scenario: action.value };\n        default:\n            return state;\n    }\n}\n\nexport const StoreContext = createContext({} as {\n    state: State,\n    dispatch: React.Dispatch<Action>\n  })\n\nexport const leaf: (id:string, label: string, contents: string) => Leaf\n    = (id, label, contents) => ({\n        kind: 'leaf', id, label, contents\n    })\n\nexport const node: (id: string, label: string, contents: string, children: Tree[]) => Node\n    = (id, label, contents, children) => ({\n        kind:'node', id, label, contents, children\n    })","export const safeUnreachable = (_x: never) => {\n    throw new Error(\"unreachable\");\n};","import React, { useState } from 'react';\nimport { UnorderedList, ListItem } from 'carbon-components-react';\nimport { ChevronRight16, ChevronDown16 } from '@carbon/icons-react';\n\nimport './FoldableList.scss';\n\nexport type FoldableListProps = { }\n\nexport const FoldableList: React.FC<FoldableListProps> = props => {\n    return (\n        <UnorderedList className='foldable-list-root'>\n            { props.children }\n        </UnorderedList>\n    );\n}\n\nexport type FoldableListItemProps = {\n    header: string,\n}\n\nexport const FoldableListItem: React.FC<FoldableListItemProps> = props => {\n    const [isOpen, setIsOpen] = useState<boolean>(false);\n    const click = () => { setIsOpen(!isOpen) };\n    const wrapper = (element: React.ReactNode) => {\n        return (<div className='fl-text'>{ element }</div>);\n    };\n    const body = <div className='fl-body'>{ React.Children.map(props.children, wrapper) }</div>;\n    const cursor = isOpen?<ChevronDown16 />:<ChevronRight16 />;\n    return (\n        <ListItem className='fl-item'>\n            <div className='fl-header' onClick={ click }>\n                { cursor }{ props.header }\n            </div>\n            { isOpen?body:<div></div> }\n        </ListItem>\n    );\n}","import React from 'react';\nimport { useContext } from 'react';\nimport { State, Tree, Leaf, Node, StoreContext } from '../store/store';\nimport { safeUnreachable } from '../error/developing';\nimport { FoldableList, FoldableListItem } from './FoldableList';\n\nconst TreeToFoldableList = (node: Tree) => {\n    if(node.kind === \"node\") {\n        return (\n            <FoldableList>\n                <FoldableListItem header={ node.label }>\n                    { node.children.map(t => TreeToFoldableList(t)) }\n                </FoldableListItem>\n            </FoldableList>\n        );\n    } else if (node.kind === \"leaf\") {\n        return (\n            <div>\n                { node.label }\n            </div>\n        )\n    } else {\n        safeUnreachable(node);\n    }\n}\n\ntype Props = { }\n\nexport const OutlineView: React.FC<Props> = props => {\n    const store = useContext(StoreContext);\n    const tree = store.state.scenario?.tree;\n    if (tree === undefined) {\n        return (<div>no data</div>);\n    } else {\n        return (<div>{ TreeToFoldableList(tree) }</div>);\n    }\n}\n","import React from 'react';\nimport { TextArea } from 'carbon-components-react';\n\nimport './LineNumberedTextArea.scss';\n\ntype Props = { \n    onChange?: (e: React.ChangeEvent<HTMLTextAreaElement>) => void,\n}\n\nexport const LineNumberedTextArea: React.FC<Props> = props => {\n    const [valueLineNumber, setValueLineNumber] = React.useState<string>(\"0\");\n    const [textAreaHeight, setTextAreaHeight] = React.useState<number>(50);\n    const onChange : React.ChangeEventHandler<HTMLTextAreaElement> = e => {\n        const ln = countLineNumber(e.target.value) + 1;\n        const lns = Array.from(Array(ln).keys()).map(n => n.toString());\n        setValueLineNumber(lns.join('\\n'));\n        setTextAreaHeight(e.target.scrollHeight);\n        props.onChange?.(e);\n    }\n    const countLineNumber = (text: string) => {\n        return text.match(/(\\r|\\n)/g)?.length || 1;\n    }\n    return (\n        <div className='bx--grid line-numbered-text-area-root'>\n            <div className='bx--row line-numbered-text-area-row'>\n                <div className='bx--col bx--col-sm-1 bx--col-md-1'>\n                    <TextArea\n                        labelText=\"\"\n                        value={ valueLineNumber }\n                        style={{ height: textAreaHeight.toString() + \"px\", pointerEvents: \"none\" }}\n                        className='line-number'>\n                    </TextArea>\n                </div>\n                <div className='bx--col bx--col-sm-3 bx--col-md-7'>\n                    <TextArea \n                        labelText=\"\"\n                        wrap=\"off\"\n                        value={ props.children?.toString() }\n                        style={{ height: textAreaHeight.toString() + \"px\" }}\n                        onChange={ onChange }>\n                    </TextArea>\n                </div>\n            </div>\n        </div>\n    );\n\n}","import React, { useContext } from 'react';\nimport { Breadcrumb, BreadcrumbItem } from 'carbon-components-react';\nimport { LineNumberedTextArea } from './LineNumberedTextArea';\nimport { Tree, StoreContext } from '../store/store';\nimport { safeUnreachable } from '../error/developing';\nimport './EditorMain.scss';\n\ntype Props = { }\n\nexport const EditorMain: React.FC<Props> = props => {\n    const store = useContext(StoreContext);\n    const updateTextArea = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        store.dispatch({ type: 'EDITOR_UPDATE', value: e.target.value });\n    }\n    return (\n        <div className=\"bx--grid\">\n            <div className=\"bx--grid-row\">\n                <EditorHeader></EditorHeader>\n            </div>\n            <div className=\"bx--grid-row\">\n                <LineNumberedTextArea\n                    onChange={ updateTextArea } >\n                    { store.state.editorContent }\n                </LineNumberedTextArea>\n            </div>\n        </div>\n    );\n}\n\ntype HeaderProps = { }\n\nconst EditorHeader: React.FC<HeaderProps> = props => {\n    const store = useContext(StoreContext);\n    const path = \n        pathTo(store.state.opened)(store.state.scenario?.tree) || [\"\"];\n    return (\n        <Breadcrumb>\n            { React.Children.map(path, name => <BreadcrumbItem>{name}</BreadcrumbItem>) }\n        </Breadcrumb>\n    );\n}\n\nconst pathTo : (targetId?: string) => (node?: Tree) => string[] | undefined =\n    targetId => node => {\n        if (targetId === undefined || node === undefined) {\n            return undefined;\n        }\n        if(node.kind === \"node\") {\n            const followingPath =\n                node.children\n                    .map(pathTo(targetId))\n                    .find(result => result !== undefined);\n            return followingPath?.concat([node.label]);\n        } else if (node.kind === \"leaf\") {\n            if (node.id === targetId) {\n                return [node.label]\n            }\n        } else {\n            safeUnreachable(node);\n        }\n    }","import React, { useReducer, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { OutlineView } from './components/OutlineView';\nimport { EditorMain } from './components/EditorMain';\nimport { reducer, initialState, StoreContext, leaf, node } from './store/store';\n\nconst dummyScenario = {\n  fileName: 'Novel Title',\n  tree: node('0', 'root', 'none', [\n    leaf('1', 'meta-info', ''),\n    node('2', 'prologue', 'none', [\n      leaf('4', 'page1', ''),\n      leaf('5', 'page2', '')\n    ]),\n    node('3', 'chapter 1', '', [\n      leaf('6', 'page1', ''),\n      leaf('7', 'page2', '')\n    ])\n  ])\n};\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => { dispatch({ type: 'LOAD_SCENARIO', value: dummyScenario }); }, []);\n  return (\n    <StoreContext.Provider value={{ state, dispatch }}>\n      <div className=\"App\">\n        <div className=\"bx--grid bx--grid--full-width bx--grid--condensed\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col bx--col-sm-1 bx--col-md-1\">\n              <OutlineView></OutlineView>\n            </div>\n            <div className=\"bx--col bx--col-sm-3 bx--col-md-7\">\n              <EditorMain></EditorMain>\n            </div>\n          </div>\n        </div>\n      </div>\n    </StoreContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\n// serviceWorkerRegistration.unregister();\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}